@page  "/email"
@layout EmailLayout

@*@using Newtonsoft.Json.Linq;*@
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.JSInterop;
@using jasonisdunn.Data;
@using jasonisdunn.Shared.Layouts;
@using jasonisdunn.Shared.States;

@inject IJSRuntime JSRuntime
@inject SMTPService SMTPService
@inject NavigationManager NavigationManager
@inject PageHistoryState PageHistoryState

<MudAppBar Fixed="true" Color="Color.Transparent" Style="left:-100px;" Bottom="true" Elevation="0" > 
<div class="emailcontent">
              <table class="tableemailcontinue">
            <tbody>
                <tr>
                    <td>
                        <div class="bg-primary text-light rounded @sentVisibility">
                            <i class=""></i>
                            <h4>Successfully sent your email message to support.</h4>
                            <br /><br />
                            <h4>Thanks for the feedback!</h4>
                        </div>
                    </td>
                </tr>
                <tr><br /></tr>
                <tr>
                    <td>
                        <button id="continueBtn" class="btn btn-primary @sentVisibility"
                                type="submit" @onclick="OnCancelOrContinue">
                            <i class="fa fa-hand-point-right" style="margin-left:14px"></i> Continue
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    <div class="email">
        <div class="form @formVisibility" id="form" tabindex="0">
            <EditForm style="color:#448AFF; margin: auto" Model="@_EmailFormModel" OnValidSubmit="OnSubmit">
                <DataAnnotationsValidator />
                <table class="tableemail" >
                    <tbody>
                        <tr>
                            <td>
                                <table class="tableemailcontent">
                                    <tbody>
                                        <tr>
                                            <td>                    
                                                <label for="Name">Name</label>
                                                <InputText style="width: 200px" id="Name" @bind-Value="_EmailFormModel.Name" />
                                                <ValidationMessage For="@(() => _EmailFormModel.Name)" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <label for="Email">Email</label>
                                                <InputText style="width: 200px" id="Email" @bind-Value="_EmailFormModel.EmailAddress"  />
                                                <ValidationMessage  For="@(() => _EmailFormModel.EmailAddress)" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <label for="Message">Message</label>
                                                <InputTextArea style="margin-bottom:2px; width:200px; height:200px; resize: none" id="Message" @bind-Value="_EmailFormModel.Message"  rows="4"  />
                                                <ValidationMessage For="@(() => _EmailFormModel.Message)" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div class="container">
                                                    <div class="row">
                                                        <div class="col-10">
                                                            <button id="submitBtn" class="btn btn-primary @submitVisibility"
                                                                    type="submit">
                                                                <i class="far fa-paper-plane"> </i>   Submit
                                                            </button>
                                                            <div class="bg-primary text-light rounded  @sendVisibility">
                                                                <h3><span class="sending"><i class="fa fa-cog fa-spin"></i> Sending</span></h3> 
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div class="container">
                                                    <div class="row">
                                                        <div class="col-10">
                                                            <button id="cancelBtn" class="btn btn-primary @cancelVisibility"
                                                                    type="button" @onclick="OnCancelOrContinue">
                                                                <i class="far fa-window-close"> </i>   Cancel
                                                            </button>            
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </EditForm>
            <br />
            <br />
            <br />
        </div>
    </div>
</div>
</MudAppBar>

@code {
    private EmailFormModel _EmailFormModel = new EmailFormModel();
    private SMTP _SMTP = new SMTP();
    private string formVisibility = "d-block";
    private string submitVisibility = "d-block";
    private string cancelVisibility  = "d-block";
    private string sendVisibility = "d-none";
    private string sentVisibility = "d-none";

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged; 
        PageHistoryState.AddPageToHistory("email");
    }

    private async Task OnSubmit()
    {
        submitVisibility = "d-none";
        cancelVisibility = "d-none";
        sendVisibility = "d-inline-block";
        await SubmitForm();
    }

    private async Task SubmitForm()
    {
        await Task.Delay(2500).ConfigureAwait(false);
        sendVisibility = "d-none";
        formVisibility = "d-none";
        sentVisibility = "d-inline-block";
        await SMTPService.Send(CreateSMTP(_SMTP));      
    }

    private SMTP CreateSMTP(SMTP smtp)
    {
        smtp.Name = _EmailFormModel.Name;
        smtp.EmailAddress = _EmailFormModel.EmailAddress;
        smtp.Message = _EmailFormModel.Message; 
        return  smtp;
    }

    private void OnCancelOrContinue()
    {
        @if (PageHistoryState.CanGoBack())
        {
             NavigationManager.NavigateTo(PageHistoryState.GetGoBackPage());
             PageHistoryState.ClearPageToHistory();
        }
        else
        {
            NavigationManager.NavigateTo("https://jasonisdunn.tech");
        }
            this.Dispose();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
    
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}




