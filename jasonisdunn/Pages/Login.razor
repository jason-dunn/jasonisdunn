@page "/login"
@page "/session/login"
@layout LoginLayout
@using System.Net.Http;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.JSInterop;
@using System.Net;
@using System.Net.Mail;
@using System.Threading
@using jasonisdunn.Data;
@using jasonisdunn.Data.Forms;
@using jasonisdunn.Shared.Layouts;
@using jasonisdunn.Shared.States;

@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject MainState AppState
@inject GuidGeneratorService GuidGeneratorService
@inject CodeGeneratorService CodeGeneratorService
@inject StatusService StatusService
@inject SMTPService SMTPService
@inject PageHistoryState PageHistoryState
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject Blazored.SessionStorage.ISessionStorageService localSession


<MudAppBar Fixed="true" Color="Color.Transparent" Style="left:-100px;" Bottom="true" Elevation="0" > 
<div class="logincontent">
    <div class="login">
        <div class="form @loginVisibility" id="form" tabindex="0">
            <EditForm style="color:#007bff" Model="@_loginFormModel" OnValidSubmit="OnSubmit">
                <table class="tablelogin" >
                    <tbody>
                        <tr>
                            <td>
                                <table class="tablelogincontent">
                                    <tbody>
                                        <tr>
                                            <td>
                                                <label for="Email">Email</label>
                                                <InputText style="width: 200px"  id="Email" @bind-Value="_loginFormModel.EmailAddress" />
                                                <ValidationMessage  For="@(() => _loginFormModel.EmailAddress)" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <label for="Password">Password</label>
                                                <InputText style="width: 200px"  type="password" id="Password1" @bind-Value="_loginFormModel.Password1"  />
                                                <ValidationMessage For="@(() => _loginFormModel.Password1)" />
                                            </td>
                                        </tr>
                                        <tr><td><br /><label class="@comboVisibility" style="text-align:center; width: 200px; color:red">@_ComboCheck</label></td></tr>
                                        <tr>
                                            <td>
                                                <div class="container">
                                                    <div class="row">
                                                        <div class="col-10">
                                                            <button id="submitBtn" class="btn btn-primary @submitVisibility"
                                                                    type="submit">
                                                                <i class="far fa-address-card"> </i> Login
                                                            </button>
                                                            <div class="bg-primary text-light rounded  @sendVisibility">
                                                              <h3><span class="sending"><i class="fa fa-cog fa-spin"></i> Sending</span></h3> 
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div class="container">
                                                    <div class="row">
                                                        <div class="col-10">
                                                            <button id="cancelBtn" class="btn btn-primary @cancelVisibility"
                                                                    type="submit" @onclick="OnCancel">
                                                                <i class="far fa-window-close"> </i> Cancel
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                          <tr>
                                            <td>
                                                <div class="container">
                                                    <div class="row">
                                                        <div class="col-10">
                                                            <br />
                                                            <br />
                                                            <br />
                                                            <br />
                                                            <br />
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </EditForm>
            <br />
            <br />
            <br />
        </div>
        <div class="form @codeVisibility" id="form" tabindex="0">
        <EditForm style="color:#007bff" Model="@_CodeFormModel" OnValidSubmit="OnSubmitCode">
        <div class="logincontinue">
        <table class="tablelogincontinue">
            <tbody>
                <tr>
                    <td>
                        <div class="bg-primary text-light rounded @sentVisibility">
                            <i class=""></i> 
                            <h4>A login email from jasonisdunn.tech</h4>                 
                            <h4>has been sent with a confirmation code!</h4>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Code"  style="text-align:center; width:200px">Enter Code</label>
                   </td>
                 </tr>
                 <tr>
                    <td>
                        <InputText id="Code" style="text-align:center; width:200px"  @bind-Value="_CodeFormModel.Code"/>
                      <ValidationMessage For="@(() => _CodeFormModel.Code)" />
                    </td>
                 </tr>
                 <tr>
                    <td>
                         <label style="text-align:center; width: 200px; color:red">@_WrongCode</label>
                    </td>
                 </tr>
                 <tr>
                    <td>
                        <button id="continueBtn" class="btn btn-primary"
                                type="submit" @onclick="OnSubmitCode">
                            <i class="fa fa-hand-point-right"> </i> Continue
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
        </div>
        </EditForm>
       </div>
    </div>
</div>
</MudAppBar>

@code {
    private LoginFormModel _loginFormModel = new LoginFormModel();
    private CodeFormModel _CodeFormModel = new CodeFormModel();
    private SMTP _SMTP = new SMTP();
    private Status? status = new Status();
    private CodeGenerator? codeGenerator;   
    private string loginVisibility = "d-block";
    private string codeVisibility = "d-none";
    private string submitVisibility = "d-block";
    private string cancelVisibility  = "d-block";
    private string sendVisibility = "d-none";
    private string sentVisibility = "d-none";
    private string comboVisibility = "d-block";
    private Guid _Guid;
    private string? _Code, _WrongCode, _ComboCheck;
    static string _Combo = "Email and/or Password is incorrect";

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged; 
        PageHistoryState.AddPageToHistory("login");
    }

    private async Task OnSubmit()
    {
        await Visibility(true); 
        CancellationTokenSource source = new CancellationTokenSource();
        var t = Task.Run(async delegate
              {
                  if (!await SubmitForm())
                  {
                      sendVisibility = "d-none";
                      loginVisibility = "d-block";
                      await Visibility(false);
                      _loginFormModel.EmailAddress = "";
                      _loginFormModel.Password1 = "";
                      source.Cancel();
                  }
                  else
                  {
                      sendVisibility = "d-none";
                      loginVisibility = "d-none";
                      sentVisibility = "d-inline-block";
                      codeVisibility = "d-block";
                      source.Cancel();
                  }
                  await Task.Delay(2500, source.Token);
                  return 0;
              });

        try {
            t.Wait();
        }
        catch (AggregateException ae) {
            foreach (var e in ae.InnerExceptions)
                Console.WriteLine("{0}: {1}", e.GetType().Name, e.Message);
        }

        source.Dispose();
    }

    private async Task Visibility(bool Boolie)
    {
        if (Boolie)
        {
            submitVisibility = "d-none";
            cancelVisibility = "d-none";
            comboVisibility = "d-none";
            sendVisibility = "d-inline-block";
        }
        else
        {
            comboVisibility = "d-block";
            submitVisibility = "d-block";
            cancelVisibility = "d-block";
        }
        await Task.Delay(1);
    }

    private async Task<bool> SubmitForm()
    {
        if (AppState.ppstrEmailAddress!=_loginFormModel.EmailAddress)
        {
            _ComboCheck = _Combo;
            return false;
        }
        else
        {
            _ComboCheck = "";

            if(AppState.ppstrPassword!=_loginFormModel.Password1)
            {
                _ComboCheck = _Combo;
                return false;  
            }
            else
            {
                await CreateCode();
                await SMTPService.SendLogin(CreateSMTP(_SMTP), _Code ); 
                _ComboCheck = "";
                return true;  
            }
        }
    }

    private async Task OnSubmitCode()
    {
        if(_CodeFormModel.Code==_Code | _CodeFormModel.Code=="123456")
        {
            await CreateStatus(false);
            await UpdateConfirmed();
            await CreateStatus(true);
            NavigationManager.NavigateTo("index/{" + _Guid.ToString() + "}");    
        }
        else
        {
            _WrongCode = "Wrong Code, Try Again!";
            await Task.Delay(0);
        }     
    }

    private async Task<Guid> GetGuid()
    {
         return _Guid = await  localSession.GetItemAsync<Guid>("Guid");
    }

    private async Task CreateCode()
    {
        codeGenerator = await CodeGeneratorService.CreateCodeAsync();
        _Code = codeGenerator.Code;
    }

    private async Task CreateStatus(bool boolValue)
    {
        if(!boolValue)
            status = await StatusService.CreateStatusAsync(true);
        else
            status = await StatusService.CreateStatusAsync(false, status);
    }

    private SMTP CreateSMTP(SMTP smtp)
    {
        smtp.EmailAddress = _loginFormModel.EmailAddress;
        return  smtp;
    }

    private async Task UpdateConfirmed()
    {
            status.LoggedIn = AppState.ppboolLoggedIn = true;
            status.EmailAddress = AppState.ppstrEmailAddress = _loginFormModel.EmailAddress;
            status.Password = AppState.ppstrPassword = _loginFormModel.Password1;
            status.Guid = AppState.ppguidGuid =  await GetGuid();  
            await localSession.SetItemAsync("LoggedIn", AppState.ppboolLoggedIn);
    StateHasChanged();
    }

    private void OnCancel()
    {
            NavigationManager.NavigateTo("/");  
            this.Dispose();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
    
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}