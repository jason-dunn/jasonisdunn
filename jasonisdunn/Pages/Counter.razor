@page "/counter"
@layout Shared.Layouts.MainLayout
@using jasonisdunn.Data;
@using jasonisdunn.Shared.States;
@inject IncrementService IncrementService
@inject MainState AppState
@inject PageHistoryState PageHistoryState
@inject Blazored.SessionStorage.ISessionStorageService localSession


<h2>Counter</h2>
<br />
@if (increment == null)
{
    <p><em>Loading...-current-count-</em></p>
}
else
{
    <MudAppBar Elevation="0" Fixed="false" Color="Color.Transparent">
    <h5>Current count  </h5><h5> : </h5> <h2> @currentCount</h2>
     </MudAppBar>
}

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>


@code{
    private Increment increment;
    private int currentCount = 0;
    [Parameter]
    public bool _Counter { get; set; }
    private bool boolCounter;

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory("counter");
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await getInfo();
            StateHasChanged();
        }
    }

    private async Task getInfo()
    {
        boolCounter = await localSession.GetItemAsync<bool>("boolCounter");
        AppState.ppintCounter= await localSession.GetItemAsync<int>("intCounter");
        currentCount = AppState.ppintCounter - 1;

        if (!boolCounter  & !AppState.ppboolCounter)
        {
            await IncrementCount();
            increment = new Increment();
            increment = await IncrementService.GetCounterAsync(boolCounter,AppState.ppintCounter);
            AppState.SetCounterState(true); 
            await localSession.SetItemAsync("boolCounter", true);  
        }
        else
        {
            increment = await IncrementService.GetCounterAsync(AppState.ppboolCounter,AppState.ppintCounter-1);
            AppState.ppintCounter = increment.Counter;
            await localSession.SetItemAsync("boolCounter", true);
            AppState.ppintCounter= await localSession.GetItemAsync<int>("intCounter");      
        }
    }

    private async Task IncrementCount()
    {   
        increment = await IncrementService.SetCounterAsync(AppState.ppintCounter++);
        currentCount = increment.Counter;
        await localSession.SetItemAsync("intCounter",AppState.ppintCounter); 
        StateHasChanged();
    }
}
